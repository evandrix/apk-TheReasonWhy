<?xml version="1.0" encoding="UTF-8"?>
<project name="TheReasonWhy" default="build_all">
	<target name="build_all" depends="app-lang, change-lang" description="Entire build process">
		<echo message="Extract package+versionCode+versionName from /AndroidManifest.xml" level="debug" />
		<path id="android.antlibs">
			<pathelement path="${sdk.dir}/tools/lib/ant-tasks.jar" />
		</path>
		<taskdef name="xpath" classname="com.android.ant.XPathTask" classpathref="android.antlibs" />
		<xpath input="AndroidManifest.xml" expression="/manifest/@package" output="manifest.package" />
		<xpath input="AndroidManifest.xml" expression="/manifest/@android:versionCode" output="manifest.versionCode" />
		<xpath input="AndroidManifest.xml" expression="/manifest/@android:versionName" output="manifest.versionName" />

		<ant target="release" />

		<echo message="Moving release APK to /" level="debug" />
		<move file="bin/TheReasonWhy-release.apk"
			tofile="TheReasonWhy-${manifest.versionName}-${manifest.versionCode}-${app.lang}.apk"
			overwrite="true">
		</move>
<!--
		<echo message="Update main.[versionCode].[pkg-name].obb according to /AndroidManifest.xml" level="debug" />
		<exec executable="sh" outputproperty="latest.obb">
			<arg value="-c" />
			<arg value="ls -lrt | awk '/main\.[0-9]+\..*\.obb$/ { f=$NF };END{ print f }'" />
		</exec>
		<property name="file" value="${latest.obb}" />
		<fail message="FILE NOT FOUND: ${file}">
			<condition>
				<not><available file="${file}" /></not>
			</condition>
		</fail>
		<move file="${file}"
			tofile="main.${manifest.versionCode}.${manifest.package}.obb"
			overwrite="true">
		</move>
-->
		<echo message="package = ${manifest.package}" />
		<echo message="versionCode = ${manifest.versionCode}" />
		<echo message="versionName = ${manifest.versionName}" />
	</target>

	<target name="app-lang" description="Request user input for target app language">
		<fail message="Language not specified! app.lang={en|zh}" unless="app.lang"/>
		<property name="app.lang" value="${app.lang}" />
		<echo message="Set language to ${app.lang}" level="debug" />
	</target>

	<target name="change-lang" depends="app-lang" description="Effect changes to code due to target lang selection">
		<echo message="Propagate target language setting to res/values/strings.xml @APP_LANG@" level="debug" />
		<copy file="strings.tmpl.xml"
			tofile="res/values/strings.xml"
			filtering="yes" overwrite="yes">
			<filterset>
				<filter token="APP_LANG" value="${app.lang}"/>
			</filterset>
		</copy>

		<echo message="Propagate target language setting to remaining Java code, etc." level="debug" />
		<exec executable="bash">
			<arg value="-c" />
			<arg value="./change-lang.sh ${app.lang}" />
		</exec>
	</target>

	<!-- The local.properties file is created and updated by the 'android' tool.
		 It contains the path to the SDK. It should *NOT* be checked into
		 Version Control Systems. -->
	<property file="local.properties" />

	<!-- The ant.properties file can be created by you. It is only edited by the
		 'android' tool to add properties to it.
		 This is the place to change some Ant specific build properties.
		 Here are some properties you may want to change/update:

		 source.dir
			 The name of the source directory. Default is 'src'.
		 out.dir
			 The name of the output directory. Default is 'bin'.

		 For other overridable properties, look at the beginning of the rules
		 files in the SDK, at tools/ant/build.xml
		 Properties related to the SDK location or the project target should
		 be updated using the 'android' tool with the 'update' action.
		 This file is an integral part of the build system for your
		 application and should be checked into Version Control Systems.

		 -->
	<property file="ant.properties" />

	<!-- if sdk.dir was not set from one of the property file, then
		 get it from the ANDROID_HOME env var.
		 This must be done before we load project.properties since
		 the proguard config can use sdk.dir -->
	<property environment="env" />
	<condition property="sdk.dir" value="${env.ANDROID_HOME}">
		<isset property="env.ANDROID_HOME" />
	</condition>

	<!-- The project.properties file is created and updated by the 'android'
		 tool, as well as ADT.
		 This contains project specific properties such as project target, and library
		 dependencies. Lower level build properties are stored in ant.properties
		 (or in .classpath for Eclipse projects).
		 This file is an integral part of the build system for your
		 application and should be checked into Version Control Systems. -->
	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->
	<fail
			message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
			unless="sdk.dir"
	/>

	<!--
		Import per project custom build rules if present at the root of the project.
		This is the place to put custom intermediary targets such as:
			-pre-build
			-pre-compile
			-post-compile (This is typically used for code obfuscation.
						   Compiled code location: ${out.classes.absolute.dir}
						   If this is not done in place, override ${out.dex.input.absolute.dir})
			-post-package
			-post-build
			-pre-clean
	-->
	<import file="custom_rules.xml" optional="true" />

	<!-- Import the actual build file.
		 To customize existing targets, there are two options:
		 - Customize only one target:
			 - copy/paste the target into this file, *before* the
			   <import> task.
			 - customize it to your needs.
		 - Customize the whole content of build.xml
			 - copy/paste the content of the rules files (minus the top node)
			   into this file, replacing the <import> task.
			 - customize to your needs.
		 ****** IMPORTANT ******
		 In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
		 in order to avoid having your file be overridden by tools such as "android update project"
	-->
	<!-- version-tag: 1 -->
	<import file="${sdk.dir}/tools/ant/build.xml" />
</project>
